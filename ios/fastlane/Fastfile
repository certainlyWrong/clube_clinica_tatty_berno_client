# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new testflight build to the TestFlight"
  lane :beta do
    # Essa flag é usada para determinar se o script está sendo executado em um ambiente de CI
    # Se essa flag não for definida a Running script executará infinitamente, provavelmente 
    # por causa de um erro de permissão
    setup_ci if ENV['CI']

    match(
      type: "appstore",
      readonly: setup_ci,
      clone_branch_directly: true,
    )

    sh("security find-identity -v -p codesigning /Users/runner/Library/Keychains/login.keychain-db")

    sh("flutter", "build", "ios", "--release", "--no-codesign") || UI.user_error!("Flutter build failed")

    build_app(workspace: "Runner.xcworkspace", scheme: "Runner")

    pilot(
      ipa: "Runner.ipa",
      api_key_path: "store.json",
      skip_waiting_for_build_processing: true,
    )
  end

  desc "Push a new release build to the App Store"
  lane :release do
    setup_ci if ENV['CI']

    match(
      type: "appstore",
      readonly: setup_ci,
      clone_branch_directly: true,
    )

    get_metadata_and_screenshots

    sh("echo New features and bug fixes > metadata/pt-BR/release_notes.txt") || UI.user_error!("Flutter build failed")
    
    sh("flutter", "build", "ios", "--release", "--no-codesign") || UI.user_error!("Flutter build failed")

    build_app(workspace: "Runner.xcworkspace", export_method: "app-store")

    deliver(
      ipa: "Runner.ipa",
      api_key_path: "store.json",
      force: true,
      precheck_include_in_app_purchases: false,
      automatic_release: true,
      skip_screenshots: true,
      submit_for_review: true,
      version_check_wait_retry_limit: 15,
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_platform: 'ios',  # iOS como plataforma
        export_compliance_uses_encryption: false,  # Definir como true se o app usar criptografia
        export_compliance_is_exempt: false,  # Defina como false se não houver isenção automática de conformidade
        export_compliance_contains_third_party_cryptography: false,  # Se você usa bibliotecas de criptografia de terceiros
        export_compliance_contains_proprietary_cryptography: false,  # Defina como true se você usa criptografia proprietária
        export_compliance_compliance_required: false,  # Apple precisará revisar essa conformidade
        export_compliance_encryption_updated: false,  # Defina como true se a criptografia foi atualizada
        export_compliance_app_type: 'public',  # Tipo de app (público, por exemplo)
        export_compliance_available_on_french_store: false  # Se está disponível na loja francesa
      }
    )
  end

  lane :get_metadata_and_screenshots do |options|
    require 'spaceship'
    require 'json'
    credentials_file = File.read('../store.json')
    credentials = JSON.parse(credentials_file)
    Spaceship::ConnectAPI.token = Spaceship::ConnectAPI::Token.create(
      key_id: credentials['key_id'],
      issuer_id: credentials['issuer_id'],
      key: credentials['key']
    )
    app = Spaceship::ConnectAPI::App.find("br.com.loopmais")
    live_version = app.get_live_app_store_version(platform: Spaceship::ConnectAPI::Platform::IOS)

    if live_version
      puts "Live-version: #{live_version.version_string}"
      system("fastlane deliver download_metadata -f --app_version '#{live_version.version_string}' --api_key_path ../store.json")
      system("fastlane deliver download_screenshots --api_key_path ../store.json")
    else
      puts "No live version found"
    end
  end 
end
